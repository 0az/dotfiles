" vim: set tabstop=8 shiftwidth=8:

" Prelude
" ... or at least the parts that affect vim at a deep level

set nocompatible	" Disable vi compat

" Vim doesn't work very well with fish
if &shell =~# 'fish$' && (v:version < 704 || v:version == 704 && !has('patch276'))
	set shell=/usr/bin/env\ bash
endif

" Neovim compat
let g:has_nvim = has('nvim')
let g:not_nvim = !g:has_nvim

" macOS detection
let g:has_mac = has('mac')
let g:not_mac = !g:has_mac

" VimR detection
let g:has_vimr = exists('g:gui_vimr') && g:gui_vimr
let g:not_vimr = !g:has_vimr

" XDG setup
let b:home_suffix = g:has_nvim ? '/nvim' : '/vim'
let b:use_xdg_cache_home = strlen($XDG_CACHE_HOME) > 0
let b:use_xdg_config_home = strlen($XDG_CONFIG_HOME) > 0
let b:use_xdg_data_home = strlen($XDG_DATA_HOME) > 0

let b:cache_home = b:use_xdg_cache_home ? expand($XDG_CACHE_HOME) : expand($HOME . '/.cache')

let g:common_cache_home = b:cache_home . '/vim'
let g:vim_cache_home = b:cache_home . b:home_suffix

if b:use_xdg_data_home
	let g:vim_data_home = expand($XDG_DATA_HOME . b:home_suffix)
else
	let g:vim_data_home = expand($HOME . '/.local/share' . b:home_suffix)
endif
if b:use_xdg_config_home
	let g:vim_config_home = expand($XDG_CONFIG_HOME . b:home_suffix)
else
	let g:vim_config_home = expand($HOME . '/.config' . b_home_suffix)
endif

if g:has_nvim
	let b:nvim_python_venv = g:vim_data_home . '/venv'
	let b:python_host_prog = b:nvim_python_venv . '/bin/python3'
	if executable(b:python_host_prog)
		let g:python3_host_prog = b:python_host_prog
	endif
	" Run the following to set this up:
	"   python3 -m venv $XDG_DATA_HOME/nvim/venv
	"   $XDG_DATA_HOME/nvim/venv/bin/pip install -U pynvim
endif

" As suggested by Arch Wiki, but with some changes disabled
if g:not_nvim
	call mkdir(g:vim_data_home, 'p', 0700)
	call mkdir(g:vim_data_home . '/undo', 'p', 0700)
	" mkdir(g:vim_data_home . '/swap', 'p', 0700)
	" mkdir(g:vim_data_home . '/backup', 'p', 0700)
	call mkdir(g:vim_data_home . '/view', 'p', 0700)
	let &undodir = g:vim_data_home . '/undo'
	" set directory=g:vim_data_home . '/swap'
	" set backupdir=g:vim_data_home . '/backup'
	let &viewdir = g:vim_data_home . '/view'
	exe "set viminfo+='1000,n" . g:vim_data_home . '/viminfo'
endif

let b:runtimepath = [g:vim_config_home, g:vim_data_home] + split(&runtimepath, ',') + [g:vim_config_home . '/after']
let &runtimepath = join(b:runtimepath, ',')

" Plugin Preload Settings
source <sfile>:h/init/01-plug-preload.vim
source <sfile>:h/init/02-plugin-preload.vim

" Plugins
source <sfile>:h/init/10-plug-plugins.vim

" Settings
source <sfile>:h/init/20-settings.vim
source <sfile>:h/init/21-mappings.vim
source <sfile>:h/init/22-plugin-settings.vim
source <sfile>:h/init/23-autocommands.vim

" Init
" autocmd VimEnter * set nolazyredraw lazyredraw
