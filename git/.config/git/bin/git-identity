#! /usr/bin/env python3
# vim: set ft=python:expandtab:textwidth=80:ts=4:sw=4:

# SPDX-License-Identifier: MIT
#
# Copyright (c) 2023 0az

"""
Manage separate Git identities using the Git configuration system.

You can open your user-global configuration file using:

    git config edit --global

To define an identity, add this block to your configuration:

    [x-identity "sample"]
    name = "ASAHI Lina"
    email = "linaa@example.com"

Then, you can select it using:

    git identity select sample

For more about the Git configuration system, see git-config(1).
"""

import subprocess
import sys
import textwrap
from os.path import basename

from subprocess import DEVNULL

_doc_summary, _doc_details = __doc__.split('\n\n', maxsplit=1)

USAGE = '''
{summary}

Usage:

    {prog} [ help | -h | --help ]
    {prog} select <identity>
    {prog} eject <identity>
    {prog} reset
    {prog} list
    {prog} show

Commands:

    select
        Set user configuration for the current repository using the
        given identity.

    reset
        Reset the current repository's user configuration.

    list
        Print all identities.

    show
        Print the currently active identity.

    eject
        Print a shell invocation that manually sets the currently
        active identity.

Description:

{details}
'''.strip().format(
    prog=basename(sys.argv[0]),
    summary=_doc_summary.strip(),
    details=textwrap.indent(_doc_details.lstrip(), ' ' * 4),
)


def error(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)


def call_silent(cmd):
    return subprocess.call(cmd, stderr=DEVNULL)


def build_config_command(key, value, location='local'):
    if location not in ('local', 'global'):
        raise ValueError('Location must be local or global!')

    cmd = ['git', 'config', '--includes', '--' + location, key, value]

    return cmd


def set_config(key, value, location='local', dry_run=False):
    if location not in ('local', 'global'):
        raise ValueError('Location must be local or global!')

    cmd = build_config_command(key, value, location)
    if not dry_run:
        subprocess.check_call(cmd)
    else:
        print(' '.join(cmd))


def parse_line(line):
    k, val = line.split('=', 1)
    tup = k.split('.', 2)
    if len(tup) == 3:
        section, subsection, var = tup
    elif len(tup) == 2:
        section, subsection, var = tup[0], '', tup[1]
    else:
        raise ValueError('Could not parse key in line: %s' % line)
    return section, subsection, var, val


def get_config(location):
    if location not in ('local', 'global'):
        raise ValueError('Invalid location: %s' % location)

    cmd = ['git', 'config', '--includes', '--%s' % location, '--list']
    output = subprocess.check_output(cmd).strip().splitlines()

    config = {}
    for line in output:
        line = line.decode('utf-8')
        section, subsection, var, val = parse_line(line)

        section_dict = config.setdefault(section, {})
        subsection_dict = (
            section_dict.setdefault(subsection, {})
            if subsection
            else section_dict
        )
        values = subsection_dict.setdefault(var, [])
        values.append(val)

    return config


def get_identities(*, casefold: bool = False):
    result = get_config('global').get('x-identity')

    if not result:
        raise RuntimeError('No identities found!')
    if all(not d.get('name') and not d.get('email') for d in result.values()):
        raise RuntimeError('No valid identities!')

    casefolded = {k.casefold(): v for k, v in result.items()}

    if len(result.keys()) != len(casefolded.keys()):
        raise RuntimeError('Non-unique identities!')

    return casefolded if casefold else result


def format_identities():
    output = []

    ids = get_identities()
    keys = sorted(ids.keys())

    for key in keys:
        identity = ids[key]
        if output:
            output.append('')
        output.append('[x-identity "{}"]'.format(key))
        for var, vals in identity.items():
            for val in vals:
                output.append('\t{var} = {val}'.format(var=var, val=val))
    return '\n'.join(output)


def list_identities():
    print(format_identities())
    return 0


############
# Commands #
############


def reset():
    """
    Reset the local context's identity.

    This command should not fail.
    """
    cmd = ['git', 'config', '--local', '--remove-section']
    call_silent(cmd + ['user'])
    call_silent(cmd + ['x-identity'])
    return 0


def select(identity):
    """
    Select an identity for the local config context.
    """
    reset()
    subsection = get_identities(casefold=True).get(identity.casefold())
    if not subsection:
        error('Identity {} does not exist!'.format(identity))
        return 1

    key = 'user.{}'
    for var, vals in subsection.items():
        for val in vals:
            set_config(key.format(var), val)
    set_config('x-identity.active', identity.lower())
    return 0


def eject(identity=None, one_line=False):
    """
    Print a shell invocation for the given identity.
    """
    if not identity:
        identity_results = get_config('local').get('x-identity', {}).get('active')
        if not identity_results:
            error('No identity provided, and no identity set locally!')
            return 1
        identity = identity_results[0]

    subsection = get_identities(casefold=True).get(identity.casefold())
    if not subsection:
        error('Identity {} does not exist!'.format(identity))
        return 1

    key = 'user.{}'
    cmds = []
    for var, vals in subsection.items():
        for val in vals:
            cmd = build_config_command(key.format(var), val)
            cmds.append(' '.join(cmd))
    joiner = '; ' if one_line else '\n'
    print(joiner.join(cmds))
    return 0


def show():
    config = get_config('local')
    identity = config.get('x-identity', {}).get('active')
    if not identity:
        return 1
    print(identity[0])
    return 0


def usage(status=0):
    error(USAGE)
    return status


########
# Main #
########


def main(argv):
    argc = len(argv)
    if argc < 2:
        usage()
        return 1

    command = argv[1].lower()
    flags = []
    for arg in argv[2:]:
        if not arg.startswith('-'):
            break
        flags.append(arg)

    if command in ('help', '-h', '--help'):
        return usage()

    if command == 'list':
        if argc != 2:
            return usage(1)

        list_identities()
        return 0

    if command == 'reset':
        if argc != 2:
            return usage(1)

        return reset()

    if command == 'select':
        if argc != 3:
            return usage(1)
        return select(argv[2])

    if command == 'eject':
        if argc < 2 or argc > 4:
            return usage(1)

        return eject(*argv[2:])

    if command == 'show':
        return show()

    return usage(1)


if __name__ == '__main__':
    sys.exit(main(sys.argv))
