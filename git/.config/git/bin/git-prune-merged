#! /usr/bin/env bash

set -euo pipefail

remote="${1:-origin}"

branch="${2:-"$(git symbolic-ref refs/remotes/"$remote"/HEAD)"}"
branch="${branch#refs/remotes/"$remote"/}" # Strip prefix

if test $# -gt 2; then
	exit 1
fi

dry_run="${DRY_RUN:-}"

raw_merged="$(git for-each-ref --format '%(refname) %(objectname)' --merged "$remote/$branch" refs/heads)"

if ! merged="$(echo "$raw_merged" | grep -v refs/heads/"$branch")" || test -z "$merged"; then
	echo "No branches were merged into tracking branch '$branch'!" >&2
	exit 0
fi

declare -a refs
readarray -t refs < <( \
	echo "$merged" \
	| cut -d' ' -f 1 \
	| cut -d/ -f 3- \
)

if test "${#refs[@]}" -eq 0; then
	exit 0
fi

current_head="$(git symbolic-ref HEAD || true)"
update_head=
remote_refs=()
for ref in "${refs[@]}"; do
	if test -z "$ref"; then
		continue
	fi
	echo git rev-parse --verify --quiet "refs/remotes/$remote/$ref^{commit}" >&2
	if git rev-parse --verify --quiet "refs/remotes/$remote/$ref^{commit}"; then
		remote_refs+=("$ref")
	fi


	if test "$current_head" = "refs/heads/$ref" -o "$current_head" = "refs/remotes/$remote/$ref"; then
		update_head=1
	fi
done

if test "${#remote_refs[@]}" -gt 0; then
	echo git push -d origin "${remote_refs[@]}"
	if test -z "$dry_run"; then
		git push -d origin "${remote_refs[@]}"
	fi
fi

if test -n "$update_head"; then
	git checkout "$branch"
fi

update_ref_script="$( \
echo "$merged" \
| awk '{ print "delete", $1, $2 }'
)"

update_ref_script="start
$update_ref_script
prepare
commit"

echo --- >&2
echo -n "$update_ref_script" >&2
if test -z "$dry_run"; then
	echo "$update_ref_script" | git update-ref --stdin
fi
